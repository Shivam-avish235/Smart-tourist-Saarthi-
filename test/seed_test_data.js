import mongoose from 'mongoose';
import dotenv from 'dotenv';
import bcrypt from 'bcryptjs';
import fs from 'fs';

// Load environment variables
dotenv.config();

// Import models
import Tourist from './src/models/Tourist.js';
import Incident from './src/models/Incident.js';

const seedTestData = async () => {
    try {
        console.log('🔗 Connecting to MongoDB...');

        // Connect to MongoDB
        await mongoose.connect(process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/smart_tourist');
        console.log('✅ Connected to MongoDB');

        // Clear existing test data
        console.log('🧹 Clearing existing test data...');
        await Tourist.deleteMany({ email: { $regex: /^test/ } });
        await Incident.deleteMany({});
        console.log('✅ Test data cleared');

        // Read test data
        const testData = JSON.parse(fs.readFileSync('./backend_test_data.json', 'utf8'));

        // Seed tourists
        console.log('👥 Seeding tourists...');
        const tourists = [];

        for (const touristData of testData.tourists) {
            // Hash password
            const salt = await bcrypt.genSalt(12);
            const hashedPassword = await bcrypt.hash(touristData.password, salt);

            const tourist = new Tourist({
                ...touristData,
                password: hashedPassword,
                lastActiveAt: new Date(),
                createdAt: new Date()
            });

            await tourist.save();
            tourists.push(tourist);
            console.log(`   ✅ Created tourist: ${tourist.personalInfo.firstName} ${tourist.personalInfo.lastName}`);
        }

        // Seed incidents  
        console.log('🚨 Seeding incidents...');
        for (const incidentData of testData.incidents) {
            // Find tourist by email
            const tourist = tourists.find(t => t.email === incidentData.touristEmail);
            if (tourist) {
                const incident = new Incident({
                    ...incidentData,
                    touristId: tourist._id,
                    reportedBy: 'System',
                    autoGenerated: true
                });

                await incident.save();
                console.log(`   ✅ Created incident: ${incident.type} for ${tourist.personalInfo.firstName}`);
            }
        }

        console.log('\n🎯 TEST DATA SEEDING COMPLETED!');
        console.log('=' * 40);
        console.log(`👥 Tourists seeded: ${tourists.length}`);
        console.log(`🚨 Incidents seeded: ${testData.incidents.length}`);

        console.log('\n🧪 TEST CREDENTIALS:');
        console.log('Email: test1@example.com | Password: password123');
        console.log('Email: test2@example.com | Password: password123');  
        console.log('Email: test3@example.com | Password: password123');
        console.log('\nAdmin: username=admin | password=admin123');

    } catch (error) {
        console.error('❌ Error seeding test data:', error);
    } finally {
        await mongoose.connection.close();
        console.log('📝 Database connection closed');
        process.exit(0);
    }
};

// Run seeder
seedTestData();
